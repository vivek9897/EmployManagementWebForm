Imports System.Web.Services
Imports EmployManagement.Employee.Models
Imports Newtonsoft.Json

Public Class _Default
    Inherits Page

    ' WebMethod to add a new employee
    <WebMethod()>
    Public Shared Function AddEmployee(name As String, department As String, email As String) As String
        Try
            ' Validate input data (You can add more validation as per your requirements)
            If String.IsNullOrEmpty(name) OrElse String.IsNullOrEmpty(department) OrElse String.IsNullOrEmpty(email) Then
                Return JsonConvert.SerializeObject(New With {.Success = False, .Message = "All fields are required."})
            End If

            ' Create a new instance of the mock employee repository
            Dim repo As New MockEmployeeRepository()

            ' Create a new employee object with the provided details
            Dim employee As New Employee.Models.Employee() With {
                .Id = 0, ' Set to 0 as it will be auto-generated by the repository
                .Name = name,
                .Email = email,
                .Department = [Enum].Parse(GetType(Dept), department)
            }

            ' Add the new employee to the repository
            repo.Add(employee)

            ' Return a success message
            Return JsonConvert.SerializeObject(New With {.Success = True, .Message = "Employee added successfully."})
        Catch ex As Exception
            ' Handle exception
            Return JsonConvert.SerializeObject(New With {.Success = False, .Message = ex.Message})
        End Try
    End Function

    ' WebMethod to retrieve all employees
    <WebMethod()>
    Public Shared Function GetAllEmployees() As String
        ' Create a new instance of the mock employee repository
        Dim repo As New MockEmployeeRepository()

        ' Retrieve all employees from the repository
        Dim employees = repo.GetAllEmployee()

        ' Serialize the employees list to JSON format
        Return JsonConvert.SerializeObject(employees)
    End Function

End Class
